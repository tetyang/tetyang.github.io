<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SOLID原则笔记</title>
    <url>/tetyang.github.io/2020/05/25/SOLID%E5%8E%9F%E5%88%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h1><p>SOLID原则是罗伯特·马丁(Robert Martin)在《敏捷软件开发 : 原则、模式与实践》(Agile Software Development, Principles, Patterns, and Practices)一书中提出的面向对象设计原则，SOLID中的五个字母分别代表:单一功能原则(Single Responsibility Principle)、开闭原则(Open/Closed Principle)、里氏替换原则(Liskov Substitution Principle)、接口隔离原则(Interface Segregation Principle)以及依赖反转(Dependency Inversion Principle)原则。</p>
<p>SOLID原则的目的是软件设计更易理解、更灵活并且更易维护。</p>
<h2 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a>单一功能原则</h2><blockquote>
<p>一个类应该只有一个理由去改变。</p>
</blockquote>
<p>尽量让每一个类对软件提供的某一部分功能负责，并让这个责任完全被类封装。</p>
<p>这个原则的主要目标是降低复杂性。不需要为一个只有200行左右代码的程序发明一个复杂的设计。把十几个方法做得漂亮，就可以了。但当程序变得很大的时候问题就来了，类会变得非常巨大，人脑已经不能记住其中的细节，保持对代码的控制会很难。此外，如果一个类负责的功能太多的话，那么每次其中一个功能发生变化时，都必须对它进行更改。在这样做的同时，就会有破坏类的其他功能部分的风险。</p>
<p>为了解决这个问题，可以把一个类分成多个部分，让每个部分负责一个单一的功能。</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote>
<p>类应该对扩展开放，但对修改关闭。</p>
</blockquote>
<p>一个类是开放的，是指你可以扩展它，产生一个子类，然后对它添加新的方法或字段，重写它的基础行为等等。有些编程语言允许你用特殊的关键字(如final)来限制类的进一步扩展，在这之后，类就不再是开放的。同时，如果一个类关闭后，它就准备好被其他类使用了——它的接口是明确定义的，将来不会被改变。</p>
<p>如果一个类已经被开发、测试、审核，并被包含在某些框架中，或者在应用中使用，那么试图改动它的代码是有风险的,所以要避免这种修改——<strong>即要使类对修改关闭</strong>。需要改变类的代码时，创建一个子类，并覆盖原类中想要改变的部分——<strong>即要使类对扩展开放</strong>。这样一来，既可以让保持该类扩展性，也不会破坏使用该类的任何客户端。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote>
<p>在扩展类时，保证能够在不破坏客户端代码的情况下传递子类的对象来代替父类的对象。</p>
</blockquote>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote>
<p>不应该强迫客户端依赖于他们不使用的方法。</p>
</blockquote>
<h2 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h2><blockquote>
<p>高阶类不应该依赖于低阶类,两者都应该依赖于抽象。抽象不应该依赖于细节,细节应该依赖于抽象。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>跳表的原理与实现</title>
    <url>/tetyang.github.io/2020/05/24/%E8%B7%B3%E8%A1%A8%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>跳表(skip list)是一种非常漂亮的数据结构。跳表的基本结构是由一系列单链表（singly-linked lists）$L_0,…L_h$构成的，我们可以把这一系列的单链表看成一种层级结构。$L_0$层有$n$个元素，我们从$L_0$层开始，逐层向上构建，每一层的单链表包含的元素都是前一层元素中随机选取的子集，直到所选取的子集为空为止。一个包含七个元素的跳表可以用下图表示</p>
<p><a href="https://imgchr.com/i/t9Prm6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/25/t9Prm6.png" alt="t9Prm6.png"></a></p>
<p>在跳表中，我们把有元素(节点）$x$出现的最高层的层数叫做元素x的高度。例如，只在$L_0$中出现的元素的高度为0。一个跳表的高度是其所包含的高度最高的节点的高度。</p>
<p>跳表的头部是一个特殊节点，叫做哨兵节点(sentinel node),这是一个哑节点(dummy node),对跳表的操作起辅助作用，不储存元素。跳表有一个关键性质，即从哨兵节点的$L_H$层开始，到$L_0$层的任意元素$x$，都存在一条最短路径，叫做搜索路径(search path)。下图例示了从哨兵节点的$L_5$层，到$L_0$层包含元素4的节点的搜索路径。</p>
<p><a href="https://imgchr.com/i/t9mzuQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/25/t9mzuQ.png" alt="t9mzuQ.png"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h2><p>对跳表中每个节点$u$，我们定义一个对象$x$，保存$u$储存的数据，再递归的定义一个指针数组$next$，$u.next[i]$指向$u$在$L_i$层的后继节点，$next$的长度表示$u$的高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	T x;</span><br><span class="line">	Node&lt;T&gt;[] next;</span><br><span class="line">	Node(T ix, <span class="keyword">int</span> h) &#123;</span><br><span class="line">		x = ix;</span><br><span class="line">		next = Array.newInstance(Node<span class="class">.<span class="keyword">class</span>, <span class="title">h</span>+1)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> next.length - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节点查找"><a href="#节点查找" class="headerlink" title="节点查找"></a>节点查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Node&lt;T&gt; <span class="title">findPredNode</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">	Node&lt;T&gt; u = sentinel;</span><br><span class="line">        <span class="keyword">int</span> r = h;</span><br><span class="line">	<span class="keyword">while</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (u.next[r] != <span class="keyword">null</span> &amp;&amp; compare(u.next[r].x,x) &lt; <span class="number">0</span>)</span><br><span class="line">			u = u.next[r];<span class="comment">// go right in list r</span></span><br><span class="line">		r--;<span class="comment">// go down into list r-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">find</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">	Node&lt;T&gt; u = findPredNode(x);</span><br><span class="line">	<span class="keyword">return</span> u.next[<span class="number">0</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : u.next[<span class="number">0</span>].x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节点插入"><a href="#节点插入" class="headerlink" title="节点插入"></a>节点插入</h2><p><a href="https://imgchr.com/i/t9N57V" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/25/t9N57V.png" alt="t9N57V.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pickHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> z = rand.nextInt();</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> ((z &amp; m) != <span class="number">0</span>) &#123;</span><br><span class="line">		k++;</span><br><span class="line">		m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">	Node&lt;T&gt; u = sentinel;</span><br><span class="line">	<span class="keyword">int</span> r = h;</span><br><span class="line">	<span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (u.next[r] != <span class="keyword">null</span>&amp;&amp; (comp = compare(u.next[r].x,x)) &lt; <span class="number">0</span>)</span><br><span class="line">			u = u.next[r];</span><br><span class="line">		<span class="keyword">if</span> (u.next[r] != <span class="keyword">null</span> &amp;&amp; comp == <span class="number">0</span>)</span><br><span class="line">		        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		stack[r--] = u;<span class="comment">// going down, store u</span></span><br><span class="line">	&#125;</span><br><span class="line">	Node&lt;T&gt; w = <span class="keyword">new</span> Node&lt;T&gt;(x, pickHeight());</span><br><span class="line">	<span class="keyword">while</span> (h &lt; w.height())</span><br><span class="line">		stack[++h] = sentinel;<span class="comment">// height increased</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w.next.length; i++) &#123;</span><br><span class="line">		w.next[i] = stack[i].next[i];</span><br><span class="line">		stack[i].next[i] = w;</span><br><span class="line">	&#125;</span><br><span class="line">	n++;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h2><p><a href="https://imgchr.com/i/t9UP9e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/25/t9UP9e.png" alt="t9UP9e.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">	Node&lt;T&gt; u = sentinel;</span><br><span class="line">	<span class="keyword">int</span> r = h;</span><br><span class="line">	<span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (u.next[r] != <span class="keyword">null</span>&amp;&amp; (comp = compare(u.next[r].x, x)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			u = u.next[r];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span> (u.next[r] != <span class="keyword">null</span> &amp;&amp; comp == <span class="number">0</span>) &#123;</span><br><span class="line">		removed = <span class="keyword">true</span>;</span><br><span class="line">		u.next[r] = u.next[r].next[r];</span><br><span class="line">		<span class="keyword">if</span> (u == sentinel &amp;&amp; u.next[r] == <span class="keyword">null</span>)</span><br><span class="line">			h--; <span class="comment">// height has gone down</span></span><br><span class="line">	&#125;</span><br><span class="line">	r--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (removed) n--;</span><br><span class="line">	<span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>跳表</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型实现原理——类型擦除机制解释</title>
    <url>/tetyang.github.io/2020/04/01/Java%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E6%9C%BA%E5%88%B6%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h1 id="Java泛型的实现原理"><a href="#Java泛型的实现原理" class="headerlink" title="Java泛型的实现原理"></a>Java泛型的实现原理</h1><p>编译器在将泛型的代码转换成虚拟机能识别的字节码时，有两种机制可以选择：<br>1.代码专化（Code specialization）</p>
<blockquote>
<p>编译器为一个泛型类的每一种实例提供独有的表示。</p>
</blockquote>
<p>2.代码共享（Code sharing)</p>
<blockquote>
<p>编译器为一个泛型类的每一种实例提供统一的表示方式,在必要的时候进行类型检查和转化。</p>
</blockquote>
<p>C++的泛型采用了前者，而Java采用了后者，即Java的编译器为每一个泛型类(或方法)提供了唯一的字节码表示，并把该泛型类(或方法)的每一个不同的实例化和这个唯一的字节码表示对应，实现这种对应的机制叫<strong>类型擦除（type erasure）</strong></p>
<h1 id="理解类型擦除"><a href="#理解类型擦除" class="headerlink" title="理解类型擦除"></a>理解类型擦除</h1><h1 id="类型擦除示例"><a href="#类型擦除示例" class="headerlink" title="类型擦除示例"></a>类型擦除示例</h1>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>泛型</tag>
        <tag>编程语言原理</tag>
      </tags>
  </entry>
</search>
